name: Excel -> CSV

on:
  push:
    # Trigger when any .xlsx changes (handles space/underscore mismatch)
    paths:
      - "**/*.xlsx"
      - "*.xlsx"
  workflow_dispatch: {}

permissions:
  contents: write  # allow pushing the CSV back

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to push a new commit

      - name: Show repo files (debug)
        run: ls -la

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install -q pandas openpyxl

      - name: Convert latest XLSX to CSV (select specific columns)
        id: convert
        shell: bash
        run: |
          python - <<'PY'
          import os, sys, glob
          import pandas as pd

          # 1) Find the xlsx to convert (prefer matching names, else first xlsx)
          preferred = ['452-Check List-KTP.xlsx', '452-Check_List-KTP.xlsx']
          xlsx = next((f for f in preferred if os.path.exists(f)), None)
          if not xlsx:
            files = sorted(glob.glob("*.xlsx"))
            if not files:
              print("ERROR: No .xlsx file found in repo root", file=sys.stderr)
              sys.exit(1)
            xlsx = files[0]

          print(f"Converting: {xlsx}")

          # 2) Read as strings to preserve formatting
          df = pd.read_excel(xlsx, dtype=str)

          # 3) Normalize headers for matching (strip trailing spaces)
          df.columns = [ (c.strip() if isinstance(c, str) else c) for c in df.columns ]

          # 4) Desired columns (exact order)
          desired = ['Status','NO.','Date','Group','Safety','Prelab','Full Report','Calculation','Due','Over Due']

          # 5) Accept small variations (e.g., 'Prelab '), map to desired names
          variants = {
            'NO.': ['NO.', 'No.', 'NO', 'No'],
            'Prelab': ['Prelab', 'Prelab '],
            'Over Due': ['Over Due', 'OverDue', 'Overdue', 'Over  Due'],
          }

          # Build a mapping: desired -> actual column in df
          colmap = {}
          cols = set(df.columns)
          for want in desired:
            actual = None
            # exact
            if want in cols:
              actual = want
            else:
              # try variants
              for alt in variants.get(want, []):
                if alt in cols:
                  actual = alt
                  break
            colmap[want] = actual

          missing = [k for k,v in colmap.items() if v is None]
          if missing:
            print("WARNING: Missing columns:", missing, file=sys.stderr)

          chosen = [colmap[k] for k in desired if colmap[k] is not None]
          if not chosen:
            print("ERROR: None of the desired columns were found.", file=sys.stderr)
            sys.exit(1)

          # 6) Output CSV next to the XLSX, same base name
          base = os.path.splitext(xlsx)[0]
          out_csv = f"{base}.csv"

          # Write with only selected columns, keep ordering
          df[chosen].to_csv(out_csv, index=False, encoding="utf-8")

          print(f"Wrote: {out_csv}")
          # Expose path to next steps
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
            fh.write(f"csv_path={out_csv}\n")
          PY

      - name: Commit CSV (only if changed)
        shell: bash
        run: |
          CSV="${{ steps.convert.outputs.csv_path }}"
          if [ -z "$CSV" ]; then
            echo "No CSV produced. Skipping commit."
            exit 0
          fi

          # If file is new, git diff might fail; handle both cases
          if git ls-files --error-unmatch "$CSV" >/dev/null 2>&1; then
            if git diff --quiet -- "$CSV"; then
              echo "No changes in $CSV"
              exit 0
            fi
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$CSV"
          git commit -m "Auto-convert Excel to CSV (selected columns) [skip ci]" || echo "Nothing to commit"
          git push